#include "HLSLSupport.cginc"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWByteAddressBuffer inBuffer;
RWByteAddressBuffer outBuffer;

//cbuffer
CBUFFER_START(Size)
uint size;
CBUFFER_END

//uint GetId(uint x, uint y, uint z) {
//	return x + (y * stride) + (z * stride * stride);
//}

bool GetValue(uint i) {
	uint valueInd = i / 8;
	uint bit = i & 31; // i % 32

	//return (inBuffer[valueInd] & (1 << bit)) != 0;
	return (inBuffer.Load(valueInd) & (1 << bit)) != 0;
}

void SetValue(uint i, bool val) {
	uint valueInd = i / 32;
	uint bit = i & 31; // i % 32

	/*if (val) outBuffer[valueInd] |= (1 << bit);
	else outBuffer[valueInd] &= ~(1 << bit);*/
}

[numthreads(4, 4, 4)]
void CSMain(uint3 pos : SV_DispatchThreadID)
{
	uint num, stride;
	//inBuffer.GetDimensions(num, stride);
	inBuffer.GetDimensions(num);

	//TODO: evaluate whether this matters
	//don't touch outer "shell" to prevent bounds checks
	uint x = pos.x + 0;
	uint y = pos.y + 0;
	uint z = pos.z + 0;

	//if (x == 5 && y == 6 && z == 7) {
	//	outBuffer.Store(0, size);
	//}
	//return;
	uint square = size * size;

	uint y_id = y * size;
	uint z_id = z * square;
	uint id = x + y_id + z_id;


	uint valueInd = id / 8;
	uint bit = id & 31; // i % 32

	if (x == size - 1 || y == size - 1 || z == size - 1 || x == 0 || z == 0) {
		outBuffer.InterlockedAnd(valueInd, ~(1 << bit));
		return;
	}
	else if (y == 0) {
		outBuffer.InterlockedOr(valueInd, 1 << bit);
		return;
	}
	//return;
	if (x >= size || y >= size || z >= size) return;

	//live if block above and below
	//stay if block below
	//die if not

	if ((!GetValue(x + y_id + size + z_id) && !GetValue(x + y_id + z_id)) || (GetValue(x + y_id + z_id) && !GetValue(x + y_id - size + z_id))) outBuffer.InterlockedAnd(valueInd, ~(1 << bit)); //die
	else outBuffer.InterlockedOr(valueInd, 1 << bit); //live
}
